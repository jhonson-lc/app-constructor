---
import Layout from "../layouts/Layout.astro";

const getPriorityColor = (priority: string) => {
  switch (priority) {
    case "high":
      return "bg-red-100 text-red-800 border-red-200"
    case "medium":
      return "bg-yellow-100 text-yellow-800 border-yellow-200"
    case "low":
      return "bg-green-100 text-green-800 border-green-200"
    default:
      return "bg-gray-100 text-gray-800 border-gray-200"
  }
}

const getStatusColor = (status: string) => {
  switch (status) {
    case "completed":
      return "bg-green-100 text-green-800 border-green-200"
    case "in-progress":
      return "bg-blue-100 text-blue-800 border-blue-200"
    case "pending":
      return "bg-gray-100 text-gray-800 border-gray-200"
    default:
      return "bg-gray-100 text-gray-800 border-gray-200"
  }
}

const getPriorityText = (priority: string) => {
  switch (priority) {
    case "high": return "Alta"
    case "medium": return "Media"
    case "low": return "Baja"
    default: return priority
  }
}

const getStatusText = (status: string) => {
  switch (status) {
    case "completed": return "Completada"
    case "in-progress": return "En Progreso"
    case "pending": return "Pendiente"
    default: return status
  }
}

const user = Astro.locals;

if(!user){
  return Astro.redirect('/login')
}

let tasks = [];

try {
  const response = await fetch("http://localhost:8081/api/tasks");
  
  if (response.ok) {
    const data = await response.json();
    tasks = data.tasks || [];
  } else {
    console.error("Failed to fetch tasks:", response.status, response.statusText);
  }
} catch (error) {
  console.error("Error fetching tasks:", error);
}

---

<Layout>
  <div class="flex h-screen bg-gray-50">
  <!-- Sidebar -->
  <div class="w-64 bg-white shadow-lg">
    <div class="p-6 border-b border-gray-200">
      <h1 class="text-xl font-bold text-gray-800">Gesti√≥n de Tareas</h1>
    </div>

    <nav class="mt-6">
      <div class="px-6 py-3">
        <div class="flex items-center space-x-3 text-blue-600 bg-blue-50 rounded-lg px-3 py-2">
          <!-- Icono CheckIcon -->
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <span class="font-medium">Tareas</span>
        </div>
      </div>

      <div class="px-6 py-2">
        <div class="flex items-center space-x-3 text-gray-600 hover:text-gray-800 hover:bg-gray-50 rounded-lg px-3 py-2 cursor-pointer">
          <!-- Icono CalendarIcon -->
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
          <span>Calendario</span>
        </div>
      </div>

      <div class="px-6 py-2">
        <div class="flex items-center space-x-3 text-gray-600 hover:text-gray-800 hover:bg-gray-50 rounded-lg px-3 py-2 cursor-pointer">
          <!-- Icono UserIcon -->
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
          </svg>
          <span>Equipo</span>
        </div>
      </div>
    </nav>
  </div>

  <!-- Main Content -->
  <div class="flex-1 overflow-hidden">
    <div class="p-8">
      <!-- Header -->
      <div class="flex justify-between items-center mb-8">
        <div>
          <h2 class="text-3xl font-bold text-gray-900">Tareas</h2>
          <p class="text-gray-600 mt-1">Gestiona y organiza tus tareas</p>
        </div>

        <button class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg flex items-center space-x-2 transition-colors">
          <!-- Icono PlusIcon -->
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
          </svg>
          <span>Nueva Tarea</span>
        </button>
      </div>

	  {
		tasks.length === 0 && (
		  <div class="text-center text-gray-500 border-dashed border-2 border-gray-200 rounded-lg p-8">
			<p>No hay tareas disponibles.</p>
		  </div>
		)
	  }

      <!-- Tasks Grid -->
      <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {tasks?.map((task) => (
          <div class="bg-white rounded-lg shadow-md p-6 border border-gray-200">
            <div class="flex justify-between items-start mb-4">
              <h3 class="text-lg font-semibold text-gray-900 line-clamp-2">{task.title}</h3>
              <button class="text-gray-400 hover:text-red-500 transition-colors">
                <!-- Icono TrashIcon -->
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </button>
            </div>

            <p class="text-gray-600 text-sm mb-4 line-clamp-3">{task.description}</p>

            <div class="flex flex-wrap gap-2 mb-4">
              <span class={`px-2 py-1 rounded-full text-xs font-medium border ${getPriorityColor(task.priority)}`}>
                {getPriorityText(task.priority)}
              </span>
              <span class={`px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(task.status)}`}>
                {getStatusText(task.status)}
              </span>
            </div>

            <div class="text-sm text-gray-500 mb-4">
              <div class="flex items-center space-x-1 mb-1">
                <!-- Icono CalendarIcon -->
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <span>Vence: {new Date(task.dueDate).toLocaleDateString("es-ES")}</span>
              </div>
              <div class="flex items-center space-x-1">
                <!-- Icono UserIcon -->
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                <span>Asignado: {task.assignee}</span>
              </div>
            </div>

            <div class="flex space-x-2">
              {task.status !== "completed" && (
                <button class="flex-1 bg-green-600 hover:bg-green-700 text-white py-2 px-3 rounded text-sm transition-colors">
                  {task.status === "pending" ? "Iniciar" : "Completar"}
                </button>
              )}
              {task.status === "completed" && (
                <button class="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-2 px-3 rounded text-sm transition-colors">
                  Reabrir
                </button>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</div>
</Layout>
